<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Fundamentals.Lang.CSharp.Benchmarks</name>
    </assembly>
    <members>
        <member name="T:Fundamentals.Lang.CSharp.Benchmarks.Collections.Collection`2">
            <summary>
            Represents a base benchmark for collections./>.
            </summary>
            <typeparam name="T">The type of the <see cref="T:Fundamentals.Lang.CSharp.Collections.ICollection`2"/> implementation.</typeparam>
            <typeparam name="TCollection">The type of the coolection.</typeparam>
        </member>
        <member name="F:Fundamentals.Lang.CSharp.Benchmarks.Collections.Collection`2.EmptyData">
            <summary>
            The data for the empty collection.
            </summary>
        </member>
        <member name="F:Fundamentals.Lang.CSharp.Benchmarks.Collections.Collection`2.SmallData">
            <summary>
            The data for the empty collection.
            </summary>
        </member>
        <member name="F:Fundamentals.Lang.CSharp.Benchmarks.Collections.Collection`2.LargeData">
            <summary>
            The data for the empty collection.
            </summary>
        </member>
        <member name="P:Fundamentals.Lang.CSharp.Benchmarks.Collections.Collection`2.SmallCollection">
            <summary>
            Gets the small collection of items.
            </summary>
        </member>
        <member name="P:Fundamentals.Lang.CSharp.Benchmarks.Collections.Collection`2.LargeCollection">
            <summary>
            Gets the large collection of items.
            </summary>
        </member>
        <member name="M:Fundamentals.Lang.CSharp.Benchmarks.Collections.Collection`2.Add(Fundamentals.Lang.CSharp.Benchmarks.Collections.CollectionType)">
            <summary>
            Represents a benchmark for adding the element to the given collection.
            </summary>
            <param name="type">The type of the collection.</param>
        </member>
        <member name="M:Fundamentals.Lang.CSharp.Benchmarks.Collections.Collection`2.Find(Fundamentals.Lang.CSharp.Benchmarks.Collections.CollectionType)">
            <summary>
            Represents a benchmark for finding the element int the given collection.
            </summary>
            <param name="type">The type of the collection.</param>
        </member>
        <member name="M:Fundamentals.Lang.CSharp.Benchmarks.Collections.Collection`2.Remove(Fundamentals.Lang.CSharp.Benchmarks.Collections.CollectionType)">
            <summary>
            Represents a benchmark for removing the element from the given collection.
            </summary>
            <param name="type">The type of the collection.</param>
        </member>
        <member name="T:Fundamentals.Lang.CSharp.Benchmarks.Collections.CollectionType">
            <summary>
            Represents the type of collection.
            </summary>
        </member>
        <member name="F:Fundamentals.Lang.CSharp.Benchmarks.Collections.CollectionType.Small">
            <summary>
            Represents the small type of colleciton.
            </summary>
        </member>
        <member name="F:Fundamentals.Lang.CSharp.Benchmarks.Collections.CollectionType.Large">
            <summary>
            Represents the large type of colleciton.
            </summary>
        </member>
        <member name="T:Fundamentals.Lang.CSharp.Benchmarks.Collections.ImmutableListCollection">
            <summary>
            Represents a benchmark for <see cref="T:Fundamentals.Lang.CSharp.Collections.ImmutableListCollection`1"/>.
            </summary>
        </member>
        <member name="P:Fundamentals.Lang.CSharp.Benchmarks.Collections.ImmutableListCollection.SmallCollection">
            <inheritdoc />
        </member>
        <member name="P:Fundamentals.Lang.CSharp.Benchmarks.Collections.ImmutableListCollection.LargeCollection">
            <inheritdoc />
        </member>
        <member name="T:Fundamentals.Lang.CSharp.Benchmarks.Collections.LinkedListCollection">
            <summary>
            Represents a benchmark for <see cref="T:Fundamentals.Lang.CSharp.Collections.LinkedListCollection`1"/>.
            </summary>
        </member>
        <member name="P:Fundamentals.Lang.CSharp.Benchmarks.Collections.LinkedListCollection.SmallCollection">
            <inheritdoc />
        </member>
        <member name="P:Fundamentals.Lang.CSharp.Benchmarks.Collections.LinkedListCollection.LargeCollection">
            <inheritdoc />
        </member>
        <member name="T:Fundamentals.Lang.CSharp.Benchmarks.Collections.ListCollection">
            <summary>
            Represents a benchmark for <see cref="T:Fundamentals.Lang.CSharp.Collections.ListCollection`1"/>.
            </summary>
        </member>
        <member name="P:Fundamentals.Lang.CSharp.Benchmarks.Collections.ListCollection.SmallCollection">
            <inheritdoc />
        </member>
        <member name="P:Fundamentals.Lang.CSharp.Benchmarks.Collections.ListCollection.LargeCollection">
            <inheritdoc />
        </member>
        <member name="T:Fundamentals.Lang.CSharp.Benchmarks.Collections.ReadOnlyCollection">
            <summary>
            Represents a benchmark for <see cref="T:Fundamentals.Lang.CSharp.Collections.ReadOnlyCollection`1"/>.
            </summary>
        </member>
        <member name="P:Fundamentals.Lang.CSharp.Benchmarks.Collections.ReadOnlyCollection.SmallCollection">
            <inheritdoc />
        </member>
        <member name="P:Fundamentals.Lang.CSharp.Benchmarks.Collections.ReadOnlyCollection.LargeCollection">
            <inheritdoc />
        </member>
        <member name="T:Fundamentals.Lang.CSharp.Benchmarks.ConditionalOperators.ConditionalOperator`1">
            <summary>
            Represents a base benchmark for conditional operators./>.
            </summary>
            <typeparam name="T">The type of the <see cref="T:Fundamentals.Lang.CSharp.ConditionalOperators.IConditionalOperator"/> implementation.</typeparam>
        </member>
        <member name="M:Fundamentals.Lang.CSharp.Benchmarks.ConditionalOperators.ConditionalOperator`1.First(Fundamentals.Lang.CSharp.Color)">
            <summary>
            Represents a benchmark for the first element of the enumeration.
            </summary>
            <param name="color">The value of the color.</param>
            <returns>The name of the color.</returns>
        </member>
        <member name="M:Fundamentals.Lang.CSharp.Benchmarks.ConditionalOperators.ConditionalOperator`1.Last(Fundamentals.Lang.CSharp.Color)">
            <summary>
            Represents a benchmark for the last element of the enumeration.
            </summary>
            <param name="color">The value of the color.</param>
            <returns>The name of the color.</returns>
        </member>
        <member name="M:Fundamentals.Lang.CSharp.Benchmarks.ConditionalOperators.ConditionalOperator`1.MinValue(Fundamentals.Lang.CSharp.Color)">
            <summary>
            Represents a benchmark for the first min-value of the enumeration.
            </summary>
            <param name="color">The value of the color.</param>
            <returns>The name of the color.</returns>
        </member>
        <member name="T:Fundamentals.Lang.CSharp.Benchmarks.ConditionalOperators.IfStatement">
            <summary>
            Represents a benchmark for <see cref="T:Fundamentals.Lang.CSharp.ConditionalOperators.IfStatement"/>.
            </summary>
        </member>
        <member name="T:Fundamentals.Lang.CSharp.Benchmarks.ConditionalOperators.MultipleIfStatements">
            <summary>
            Represents a benchmark for <see cref="T:Fundamentals.Lang.CSharp.ConditionalOperators.MultipleIfStatements"/>.
            </summary>
        </member>
        <member name="T:Fundamentals.Lang.CSharp.Benchmarks.ConditionalOperators.SwitchExpression">
            <summary>
            Represents a benchmark for <see cref="T:Fundamentals.Lang.CSharp.ConditionalOperators.SwitchExpression"/>.
            </summary>
        </member>
        <member name="T:Fundamentals.Lang.CSharp.Benchmarks.ConditionalOperators.SwitchStatement">
            <summary>
            Represents a benchmark for <see cref="T:Fundamentals.Lang.CSharp.ConditionalOperators.SwitchStatement"/>.
            </summary>
        </member>
        <member name="T:Fundamentals.Lang.CSharp.Benchmarks.ConditionalOperators.TernaryOperator">
            <summary>
            Represents a benchmark for <see cref="T:Fundamentals.Lang.CSharp.ConditionalOperators.TernaryOperator"/>.
            </summary>
        </member>
        <member name="T:Fundamentals.Lang.CSharp.Benchmarks.ErrorHandling.ErrorHandler`1">
            <summary>
            Represents a base benchmark for conditional operators./>.
            </summary>
            <typeparam name="T">The type of the <see cref="T:Fundamentals.Lang.CSharp.ErrorHandling.IErrorHandler"/> implementation.</typeparam>
        </member>
        <member name="M:Fundamentals.Lang.CSharp.Benchmarks.ErrorHandling.ErrorHandler`1.General">
            <summary>
            Represents a general benchmark.
            </summary>
        </member>
        <member name="T:Fundamentals.Lang.CSharp.Benchmarks.ErrorHandling.Exception">
            <summary>
            Represents a benchmark for <see cref="T:Fundamentals.Lang.CSharp.ErrorHandling.Exception"/>.
            </summary>
        </member>
        <member name="T:Fundamentals.Lang.CSharp.Benchmarks.ErrorHandling.OutputParameter">
            <summary>
            Represents a benchmark for <see cref="T:Fundamentals.Lang.CSharp.ErrorHandling.OutputParameter"/>.
            </summary>
        </member>
        <member name="T:Fundamentals.Lang.CSharp.Benchmarks.ErrorHandling.ReturnCode">
            <summary>
            Represents a benchmark for <see cref="T:Fundamentals.Lang.CSharp.ErrorHandling.ReturnCode"/>.
            </summary>
        </member>
        <member name="T:Fundamentals.Lang.CSharp.Benchmarks.ErrorHandling.ReturnResult">
            <summary>
            Represents a benchmark for <see cref="T:Fundamentals.Lang.CSharp.ErrorHandling.ReturnResult"/>.
            </summary>
        </member>
    </members>
</doc>
