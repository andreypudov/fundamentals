<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Fundamentals.Lang.CSharp</name>
    </assembly>
    <members>
        <member name="T:Fundamentals.Lang.CSharp.Collections.ICollection`2">
            <summary>
            Exposes a data structure that implements the collection.
            </summary>
            <typeparam name="TCollection">The type of the coolection.</typeparam>
            <typeparam name="TItem">The type of elements in the coolection.</typeparam>
        </member>
        <member name="M:Fundamentals.Lang.CSharp.Collections.ICollection`2.Find(`0,`1)">
            <summary>
            Finds the first node that contains the specified value.
            </summary>
            <param name="collection">The instance of the collection.</param>
            <param name="value">The value to locate in the collection.</param>
            <returns>The first node/value that contains the specified value, if found; otherwise, null.</returns>
        </member>
        <member name="M:Fundamentals.Lang.CSharp.Collections.ICollection`2.Filter(`0,System.Func{`1,System.Boolean})">
            <summary>
            Filters a sequence of values based on a predicate.
            </summary>
            <param name="collection">The collection to filter.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>An IEnumerable{TItem} that contains elements from the input sequence that satisfy the condition.</returns>
        </member>
        <member name="T:Fundamentals.Lang.CSharp.Collections.ImmutableArrayCollection`1">
            <summary>
            Represents an immutable array collection.
            </summary>
            <typeparam name="TItem">The type of elements in the collection.</typeparam>
        </member>
        <member name="M:Fundamentals.Lang.CSharp.Collections.ImmutableArrayCollection`1.Find(System.Collections.Immutable.ImmutableArray{`0},`0)">
            <inheritdoc />
        </member>
        <member name="M:Fundamentals.Lang.CSharp.Collections.ImmutableArrayCollection`1.Filter(System.Collections.Immutable.ImmutableArray{`0},System.Func{`0,System.Boolean})">
            <inheritdoc />
        </member>
        <member name="T:Fundamentals.Lang.CSharp.Collections.ImmutableListCollection`1">
            <summary>
            Represents an immutable list collection.
            </summary>
            <typeparam name="TItem">The type of elements in the collection.</typeparam>
        </member>
        <member name="M:Fundamentals.Lang.CSharp.Collections.ImmutableListCollection`1.Find(System.Collections.Immutable.ImmutableList{`0},`0)">
            <inheritdoc />
        </member>
        <member name="M:Fundamentals.Lang.CSharp.Collections.ImmutableListCollection`1.Filter(System.Collections.Immutable.ImmutableList{`0},System.Func{`0,System.Boolean})">
            <inheritdoc />
        </member>
        <member name="T:Fundamentals.Lang.CSharp.Collections.LinkedListCollection`1">
            <summary>
            Represents an immutable list collection.
            </summary>
            <typeparam name="TItem">The type of elements in the collection.</typeparam>
        </member>
        <member name="M:Fundamentals.Lang.CSharp.Collections.LinkedListCollection`1.Find(System.Collections.Generic.LinkedList{`0},`0)">
            <inheritdoc />
        </member>
        <member name="M:Fundamentals.Lang.CSharp.Collections.LinkedListCollection`1.Filter(System.Collections.Generic.LinkedList{`0},System.Func{`0,System.Boolean})">
            <inheritdoc />
        </member>
        <member name="T:Fundamentals.Lang.CSharp.Collections.ListCollection`1">
            <summary>
            Represents an immutable list collection.
            </summary>
            <typeparam name="TItem">The type of elements in the collection.</typeparam>
        </member>
        <member name="M:Fundamentals.Lang.CSharp.Collections.ListCollection`1.Find(System.Collections.Generic.List{`0},`0)">
            <inheritdoc />
        </member>
        <member name="M:Fundamentals.Lang.CSharp.Collections.ListCollection`1.Filter(System.Collections.Generic.List{`0},System.Func{`0,System.Boolean})">
            <inheritdoc />
        </member>
        <member name="T:Fundamentals.Lang.CSharp.Collections.ReadOnlyCollection`1">
            <summary>
            Represents an read only collection.
            </summary>
            <typeparam name="TItem">The type of elements in the collection.</typeparam>
        </member>
        <member name="M:Fundamentals.Lang.CSharp.Collections.ReadOnlyCollection`1.Find(System.Collections.ObjectModel.ReadOnlyCollection{`0},`0)">
            <inheritdoc />
        </member>
        <member name="M:Fundamentals.Lang.CSharp.Collections.ReadOnlyCollection`1.Filter(System.Collections.ObjectModel.ReadOnlyCollection{`0},System.Func{`0,System.Boolean})">
            <inheritdoc />
        </member>
        <member name="T:Fundamentals.Lang.CSharp.Color">
            <summary>
            The enumeration of colors.
            </summary>
        </member>
        <member name="F:Fundamentals.Lang.CSharp.Color.White">
            <summary>The value of white color.</summary>
        </member>
        <member name="F:Fundamentals.Lang.CSharp.Color.Silver">
            <summary>The value of silver color.</summary>
        </member>
        <member name="F:Fundamentals.Lang.CSharp.Color.Gray">
            <summary>The value of gray color.</summary>
        </member>
        <member name="F:Fundamentals.Lang.CSharp.Color.Black">
            <summary>The value of black color.</summary>
        </member>
        <member name="F:Fundamentals.Lang.CSharp.Color.Red">
            <summary>The value of red color.</summary>
        </member>
        <member name="F:Fundamentals.Lang.CSharp.Color.Maroon">
            <summary>The value of maroon color.</summary>
        </member>
        <member name="F:Fundamentals.Lang.CSharp.Color.Yellow">
            <summary>The value of yellow color.</summary>
        </member>
        <member name="F:Fundamentals.Lang.CSharp.Color.Olive">
            <summary>The value of olive color.</summary>
        </member>
        <member name="F:Fundamentals.Lang.CSharp.Color.Lime">
            <summary>The value of lime color.</summary>
        </member>
        <member name="F:Fundamentals.Lang.CSharp.Color.Green">
            <summary>The value of green color.</summary>
        </member>
        <member name="F:Fundamentals.Lang.CSharp.Color.Aqua">
            <summary>The value of aqua color.</summary>
        </member>
        <member name="F:Fundamentals.Lang.CSharp.Color.Teal">
            <summary>The value of teal color.</summary>
        </member>
        <member name="F:Fundamentals.Lang.CSharp.Color.Blue">
            <summary>The value of blue color.</summary>
        </member>
        <member name="F:Fundamentals.Lang.CSharp.Color.Navy">
            <summary>The value of navy color.</summary>
        </member>
        <member name="F:Fundamentals.Lang.CSharp.Color.Fuchsia">
            <summary>The value of fuchsia color.</summary>
        </member>
        <member name="F:Fundamentals.Lang.CSharp.Color.Purple">
            <summary>The value of purple color.</summary>
        </member>
        <member name="T:Fundamentals.Lang.CSharp.ConditionalOperators.IConditionalOperator">
            <summary>
            Exposes an operator that provides the conditional execution.
            </summary>
        </member>
        <member name="M:Fundamentals.Lang.CSharp.ConditionalOperators.IConditionalOperator.GetName(Fundamentals.Lang.CSharp.Color)">
            <summary>
            Returns the name of the given color.
            </summary>
            <param name="color">The instance of the color.</param>
            <returns>The name of the given color.</returns>
        </member>
        <member name="T:Fundamentals.Lang.CSharp.ConditionalOperators.IfStatement">
            <summary>
            Represents an if condition statement.
            </summary>
        </member>
        <member name="M:Fundamentals.Lang.CSharp.ConditionalOperators.IfStatement.GetName(Fundamentals.Lang.CSharp.Color)">
            <inheritdoc />
        </member>
        <member name="T:Fundamentals.Lang.CSharp.ConditionalOperators.MultipleIfStatements">
            <summary>
            Represents an if condition statement.
            </summary>
        </member>
        <member name="M:Fundamentals.Lang.CSharp.ConditionalOperators.MultipleIfStatements.GetName(Fundamentals.Lang.CSharp.Color)">
            <inheritdoc />
        </member>
        <member name="T:Fundamentals.Lang.CSharp.ConditionalOperators.SwitchExpression">
            <summary>
            Represents a switch expression.
            </summary>
        </member>
        <member name="M:Fundamentals.Lang.CSharp.ConditionalOperators.SwitchExpression.GetName(Fundamentals.Lang.CSharp.Color)">
            <inheritdoc />
        </member>
        <member name="T:Fundamentals.Lang.CSharp.ConditionalOperators.SwitchStatement">
            <summary>
            Represents a switch statement.
            </summary>
        </member>
        <member name="M:Fundamentals.Lang.CSharp.ConditionalOperators.SwitchStatement.GetName(Fundamentals.Lang.CSharp.Color)">
            <inheritdoc />
        </member>
        <member name="T:Fundamentals.Lang.CSharp.ConditionalOperators.TernaryOperator">
            <summary>
            Represents a ternary operator.
            </summary>
        </member>
        <member name="M:Fundamentals.Lang.CSharp.ConditionalOperators.TernaryOperator.GetName(Fundamentals.Lang.CSharp.Color)">
            <inheritdoc />
        </member>
        <member name="T:Fundamentals.Lang.CSharp.ErrorHandling.Exception">
            <summary>
            Represents an error handling using exception.
            </summary>
        </member>
        <member name="M:Fundamentals.Lang.CSharp.ErrorHandling.Exception.HandleError">
            <inheritdoc />
        </member>
        <member name="T:Fundamentals.Lang.CSharp.ErrorHandling.IErrorHandler">
            <summary>
            Exposes an operator that provides the conditional execution.
            </summary>
        </member>
        <member name="M:Fundamentals.Lang.CSharp.ErrorHandling.IErrorHandler.HandleError">
            <summary>
            Handles a simulated error in the execution.
            </summary>
        </member>
        <member name="T:Fundamentals.Lang.CSharp.ErrorHandling.OutputParameter">
            <summary>
            Represents an error handling using an output parameter.
            </summary>
        </member>
        <member name="M:Fundamentals.Lang.CSharp.ErrorHandling.OutputParameter.HandleError">
            <inheritdoc />
        </member>
        <member name="T:Fundamentals.Lang.CSharp.ErrorHandling.Result">
            <summary>
            Represents the result of the execution.
            </summary>
        </member>
        <member name="M:Fundamentals.Lang.CSharp.ErrorHandling.Result.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Fundamentals.Lang.CSharp.ErrorHandling.Result"/> class.
            </summary>
            <param name="success">The result flag of operation.</param>
            <param name="error">The text of the error.</param>
        </member>
        <member name="P:Fundamentals.Lang.CSharp.ErrorHandling.Result.Success">
            <summary>
            Gets a value indicating whether operation completed with success status.
            </summary>
        </member>
        <member name="P:Fundamentals.Lang.CSharp.ErrorHandling.Result.Failure">
            <summary>
            Gets a value indicating whether operation completed with failure status.
            </summary>
        </member>
        <member name="P:Fundamentals.Lang.CSharp.ErrorHandling.Result.Error">
            <summary>
            Gets the text of the error.
            </summary>
        </member>
        <member name="M:Fundamentals.Lang.CSharp.ErrorHandling.Result.Fail(System.String)">
            <summary>
            Constructs the instance of the <see cref="T:Fundamentals.Lang.CSharp.ErrorHandling.Result"/> with failure status.
            </summary>
            <param name="message">The text of the error.</param>
            <returns>The new instance of the result.</returns>
        </member>
        <member name="M:Fundamentals.Lang.CSharp.ErrorHandling.Result.Ok">
            <summary>
            Constructs the instance of the <see cref="T:Fundamentals.Lang.CSharp.ErrorHandling.Result"/> with success status.
            </summary>
            <returns>The new instance of the result.</returns>
        </member>
        <member name="T:Fundamentals.Lang.CSharp.ErrorHandling.ReturnCode">
            <summary>
            Represents an error handling using error code.
            </summary>
        </member>
        <member name="M:Fundamentals.Lang.CSharp.ErrorHandling.ReturnCode.HandleError">
            <inheritdoc />
        </member>
        <member name="T:Fundamentals.Lang.CSharp.ErrorHandling.ReturnResult">
            <summary>
            Represents an error handling using result.
            </summary>
        </member>
        <member name="M:Fundamentals.Lang.CSharp.ErrorHandling.ReturnResult.HandleError">
            <inheritdoc />
        </member>
    </members>
</doc>
